const scriptURL = "https://script.google.com/macros/s/AKfycbwd9H6HDIiTgsiPuIOWb07tVrBllZB_tzxIV8wH11W0jmuYv64KNRzmT7d-40JHwmFWNA/exec";
const names = ["–Ø–Ω–∞ –°–∞–π–≥–æ–Ω", "–ü–∞—à–∞ –°–∞–π–≥–æ–Ω", "–û–ª–µ—Å—è", "–°–ª–∞–≤–∞", "–¢–∞–Ω—è", "–ü–∞—à–∞ –ü–µ—Ä—Å–∏–∫", "–ö–∏—Ä–∏–ª–ª", "–û–ª—è", "–ò–Ω–Ω–∞", "–Ø–Ω–∞ –ê—Ä—á–∏", "–°–∞—à–∞"];
const emojis = ["üê∂", "üêï", "üêæ", "ü¶¥", "üéæ", "üê©", "ü¶Æ", "üêï‚Äçü¶∫", "ü•é", "üêæ", "ü¶¥"];

const checkboxContainer = document.getElementById("checkboxes");
const resultDiv = document.getElementById("result");
const historyContainer = document.getElementById("history-container");
const ratingBlock = document.getElementById("rating");
const punishmentBlock = document.getElementById("punishment");
const skeleton = document.getElementById("loading-skeleton");

// –°–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∂–∏ –∫–∞–∂–¥–æ–º—É –∏–º–µ–Ω–∏
const nameEmojis = {};
names.forEach((name, i) => {
  nameEmojis[name] = emojis[i % emojis.length];
});

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
names.forEach(name => {
  const label = document.createElement("label");
  const checkbox = document.createElement("input");
  checkbox.type = "checkbox";
  checkbox.name = "names";
  checkbox.value = name;
  label.appendChild(checkbox);
  label.appendChild(document.createTextNode(`${nameEmojis[name]} ${name}`));
  checkboxContainer.appendChild(label);
});

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateStr) {
  const d = new Date(dateStr);
  const months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                  "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"];
  return `${d.getDate()} ${months[d.getMonth()]} ${d.getFullYear()}`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
document.getElementById("attendance-form").addEventListener("submit", async function(e) {
  e.preventDefault();
  const checked = Array.from(document.querySelectorAll("input[name='names']:checked")).map(cb => cb.value);
  const today = new Date().toISOString().slice(0, 10);
  const payload = {
    date: today,
    names,
    marked: checked
  };
  try {
    const response = await fetch(scriptURL, {
      method: "POST",
      body: JSON.stringify(payload),
      headers: { "Content-Type": "application/json" }
    });
    const data = await response.json();
    resultDiv.textContent = "‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!";
    localStorage.setItem("dog_diary_cache", JSON.stringify(data));
    renderHistory(data);
  } catch (error) {
    resultDiv.textContent = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è";
  }
});

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
function renderHistory(data) {
  if (!data || data.length < 2) return;
  skeleton.remove();

  const header = data[0];
  const rows = data.slice(1);

  const table = document.createElement("table");
  const thead = document.createElement("thead");
  const headRow = document.createElement("tr");
  header.forEach(h => {
    const th = document.createElement("th");
    th.textContent = h === "–î–∞—Ç–∞" ? "üìÖ –î–∞—Ç–∞" : `${nameEmojis[h] || ""} ${h}`;
    headRow.appendChild(th);
  });
  thead.appendChild(headRow);
  table.appendChild(thead);

  const tbody = document.createElement("tbody");
  rows.forEach(row => {
    const tr = document.createElement("tr");
    row.forEach((val, i) => {
      const td = document.createElement("td");
      if (i === 0) {
        td.textContent = formatDate(val);
      } else {
        td.className = val === "1" ? "present" : "absent";
        td.textContent = val === "1" ? "‚úì" : "‚Äì";
      }
      tr.appendChild(td);
    });
    tbody.appendChild(tr);
  });
  table.appendChild(tbody);
  historyContainer.innerHTML = "";
  historyContainer.appendChild(table);

  // –†–µ–π—Ç–∏–Ω–≥
  const counts = {};
  names.forEach(name => counts[name] = 0);
  rows.forEach(row => {
    row.forEach((val, i) => {
      if (i > 0 && val === "1") counts[header[i]]++;
    });
  });
  const sorted = Object.entries(counts).sort((a,b) => b[1]-a[1]);
  ratingBlock.innerHTML = "<h2>üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏</h2>";
  sorted.forEach(([name, count]) => {
    ratingBlock.innerHTML += `<div><span class="name">${name}</span>: <span class="count">${count}</span></div>`;
  });

  // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
  const now = new Date();
  const nextMonth = new Date(now);
  nextMonth.setMonth(now.getMonth() + 1, 0);
  const monthEnd = nextMonth.getDate();
  const lastName = sorted.at(-1)[0];
  const monthNames = ["—è–Ω–≤–∞—Ä–µ", "—Ñ–µ–≤—Ä–∞–ª–µ", "–º–∞—Ä—Ç–µ", "–∞–ø—Ä–µ–ª–µ", "–º–∞–µ", "–∏—é–Ω–µ", "–∏—é–ª–µ", "–∞–≤–≥—É—Å—Ç–µ", "—Å–µ–Ω—Ç—è–±—Ä–µ", "–æ–∫—Ç—è–±—Ä–µ", "–Ω–æ—è–±—Ä–µ", "–¥–µ–∫–∞–±—Ä–µ"];
  const monthText = monthNames[now.getMonth()];
  punishmentBlock.innerHTML = now.getDate() === monthEnd
    ? `üçæ –í ${monthText} —Å–ª–∞–±—ã–º –∑–≤–µ–Ω–æ–º –±—ã–ª–∞ <b>${lastName}</b>. ${lastName} –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è üçæ`
    : `ü§î –ú–µ—Å—è—Ü –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–æ –ø–æ–∫–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø—Ä–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –±—É–¥–µ—Ç <b>${lastName}</b> üçæ`;
}

// –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
async function loadHistory() {
  const cached = localStorage.getItem("dog_diary_cache");
  if (cached) {
    try {
      const data = JSON.parse(cached);
      renderHistory(data);
    } catch {}
  }
  try {
    const response = await fetch(scriptURL);
    const data = await response.json();
    localStorage.setItem("dog_diary_cache", JSON.stringify(data));
    renderHistory(data);
  } catch (e) {
    console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", e);
  }
}

loadHistory();